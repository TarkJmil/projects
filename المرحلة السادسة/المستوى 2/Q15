♡, [3/4/2025 12:33 AM]
إضافة محرك بحث داخلي للمقالات باستخدام Flask:

لإضافة محرك بحث داخلي للمقالات باستخدام Flask، يمكنك استخدام مكتبات بحث مثل Elasticsearch أو Whoosh. سأشرح لك كيفية استخدام كل منهما في مشروع Flask وكيفية تحسين نتائج البحث باستخدام خوارزميات ترتيب النتائج.

1. استخدام Whoosh في Flask:

Whoosh هي مكتبة بحث Python مفتوحة المصدر تدعم فهرسة النصوص والبحث فيها بسرعة.

الخطوات:

1. تثبيت Whoosh: أولًا، يجب عليك تثبيت مكتبة Whoosh عبر pip:

pip install whoosh


2. إعداد نموذج المقالات: أنشئ نموذج Flask لتمثيل المقالات. على سبيل المثال:

from flask import Flask, render_template, request
from whoosh.index import create_in
from whoosh.fields import Schema, TEXT
from whoosh.qparser import QueryParser

app = Flask(name)

# تعريف مخطط Whoosh
schema = Schema(title=TEXT(stored=True), content=TEXT(stored=True))

# إنشاء فهرس (Index)
index_dir = "index"
ix = create_in(index_dir, schema)

# وظيفة لإضافة مقال إلى الفهرس
def add_article_to_index(title, content):
    writer = ix.writer()
    writer.add_document(title=title, content=content)
    writer.commit()

@app.route("/search", methods=["GET", "POST"])
def search():
    query = request.form.get('query')
    if query:
        with ix.searcher() as searcher:
            query_parser = QueryParser("content", ix.schema)
            parsed_query = query_parser.parse(query)
            results = searcher.search(parsed_query)
            return render_template('results.html', results=results)
    return render_template('search.html')

if name == "main":
    app.run(debug=True)


3. فهرسة المقالات: عند إضافة مقال جديد، يمكنك استخدام وظيفة add_article_to_index لإضافة المقالات إلى الفهرس.


4. تنفيذ البحث: عند تقديم استعلام بحث عبر نموذج HTML، يتم استخدام Whoosh لتحليل الاستعلام والبحث عن المقالات المطابقة.



تحسين نتائج البحث:

ترتيب النتائج: باستخدام Whoosh، يتم ترتيب النتائج حسب أفضل تطابق مع الاستعلام. يمكن تحسين ترتيب النتائج باستخدام خوارزميات مثل TF-IDF (Term Frequency-Inverse Document Frequency) أو تعديل أوزان الكلمات بناءً على أهمية الكلمات في الاستعلام.

مؤشرات متعددة: يمكنك تحسين نتائج البحث باستخدام مؤشرات متعددة (Multi-indexing)، مثل فهرسة العناوين والمحتوى بشكل منفصل.


2. استخدام Elasticsearch في Flask:

Elasticsearch هو محرك بحث قوي جدًا يستخدم في العديد من تطبيقات البحث الكبيرة.

الخطوات:

1. تثبيت Elasticsearch: أولًا، تحتاج إلى تثبيت مكتبة Elasticsearch:

pip install elasticsearch


2. إعداد Flask مع Elasticsearch: بعد تثبيت Elasticsearch، تحتاج إلى الاتصال بـ Elasticsearch cluster (قد يكون محليًا أو عبر الخدمة السحابية).

from flask import Flask, request, render_template
from elasticsearch import Elasticsearch

app = Flask(name)
es = Elasticsearch()

# فهرسة مقال جديد
def add_article_to_elasticsearch(title, content):
    doc = {
        'title': title,
        'content': content
    }
    es.index(index="articles", doc_type="_doc", document=doc)

@app.route("/search", methods=["GET", "POST"])
def search():
    query = request.form.get('query')
    if query:
        response = es.search(index="articles", body={
            "query": {
                "match": {
                    "content": query
                }
            }
        })
        results = response['hits']['hits']
        return render_template('results.html', results=results)
    return render_template('search.html')

if name == "main":
    app.run(debug=True)


3. إضافة المقالات إلى Elasticsearch: استخدم add_article_to_elasticsearch لإضافة المقالات إلى Elasticsearch index.


4. تنفيذ البحث: عندما يدخل المستخدم استعلامًا في النموذج، يتم إرسال الاستعلام إلى Elasticsearch باستخدام es.search ويتم استرجاع النتائج وعرضها.



تحسين نتائج البحث:

ترتيب النتائج باستخدام Elasticsearch:

مؤشر TF-IDF: في Elasticsearch، يتم ترتيب النتائج باستخدام TF-IDF أو BM25 بشكل افتراضي، ويمكن تخصيصه بناءً على متطلباتك.

تعزيز نتائج البحث: يمكنك تحسين ترتيب النتائج عبر التعزيز بالوزن (boosting) على الحقول الأكثر أهمية مثل العنوان أو المحتوى.

نقاط الاستعلام: مثلًا، يمكن تعزيز العناوين أو المحتوى الذي يحتوي على كلمات رئيسية معينة.


تحسين الاستعلامات:

♡, [3/4/2025 12:33 AM]
يمكنك تحسين الاستعلام باستخدام تحليل الاستعلامات، مثل فصل الكلمات (stemming) أو التصحيح التلقائي.



3. خوارزميات ترتيب النتائج:

TF-IDF (Term Frequency - Inverse Document Frequency):

يتم استخدام هذا لتحديد أهمية الكلمة في المستند.

يمكن تنفيذ هذا باستخدام مكتبات مثل Whoosh أو Elasticsearch.


BM25:

هو خوارزمية تحسين ترتيب البحث في Elasticsearch والتي تعتبر أكثر تطورًا من TF-IDF.


الوزن التفضيلي:

يمكن تطبيق وزن إضافي على الكلمات الأكثر أهمية (مثل الكلمات الرئيسية في العنوان).


تخصيص الخوارزميات:

يمكن أن تؤثر الخصائص مثل تاريخ النشر، وعدد المشاهدات، وتقييمات المستخدمين على ترتيب النتائج.



الخلاصة:

باستخدام Whoosh و Elasticsearch، يمكن دمج محرك بحث داخلي للمقالات في تطبيق Flask بسهولة.

لتحسين نتائج البحث، يمكن استخدام تقنيات مثل TF-IDF، BM25، الوزن التفضيلي، وتحليل الاستعلامات لتخصيص البحث وفقًا لاحتياجات المستخدم.