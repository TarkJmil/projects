كيفية إضافة دعم متعدد اللغات في تطبيق Flask باستخدام Flask-Babel:

1. تثبيت Flask-Babel:

في البداية، يجب تثبيت مكتبة Flask-Babel التي توفر أدوات للتعامل مع الترجمات والتوقيت المحلي في تطبيقات Flask. يمكن تثبيتها باستخدام pip:

pip install Flask-Babel

2. تكوين Flask-Babel:

بعد تثبيت Flask-Babel، يجب تكوين التطبيق لتفعيله. يمكنك فعل ذلك عن طريق إضافة الكود التالي إلى ملف التطبيق:

from flask import Flask
from flask_babel import Babel

app = Flask(name)
app.config['BABEL_DEFAULT_LOCALE'] = 'en'  # تعيين اللغة الافتراضية
app.config['BABEL_DEFAULT_TIMEZONE'] = 'UTC'  # تعيين المنطقة الزمنية الافتراضية

babel = Babel(app)

3. ترجمة النصوص داخل التطبيق:

لتنفيذ الترجمة، يمكن استخدام دالة gettext أو ngettext لترجمة النصوص داخل التطبيق. إليك الطريقة:

gettext: تُستخدم لترجمة نصوص واحدة.

ngettext: تُستخدم لترجمة النصوص التي تحتوي على صيغة الجمع.


مثال:

from flask_babel import gettext

@app.route('/')
def index():
    return gettext('Hello, World!')

بعد ذلك، يمكن استخدام أداة pybabel لاستخراج النصوص القابلة للترجمة من التطبيق وترجمتها إلى لغات أخرى.

4. ترجمة النصوص:

لبدء الترجمة، يجب عليك استخراج النصوص القابلة للترجمة، ثم ترجمتها باستخدام أدوات Flask-Babel:

1. استخراج النصوص القابلة للترجمة:

pybabel extract -F babel.cfg -o messages.pot .

ستتم إضافة جميع النصوص القابلة للترجمة إلى ملف messages.pot.


2. إنشاء ملفات الترجمة: لتوليد ملفات الترجمة للغات محددة:

pybabel init -i messages.pot -d translations -l ar  # على سبيل المثال للغة العربية


3. ترجمة النصوص: يمكنك تحرير الملف translations/ar/LC_MESSAGES/messages.po وترجمة النصوص بداخله.


4. تحديث الملفات: بعد إضافة الترجمات الجديدة، يجب تحديث الملفات باستخدام:

pybabel update -i messages.pot -d translations


5. ترجمة النصوص إلى لغة معينة: يمكنك تحديد اللغة باستخدام متغير locale:

from flask_babel import _

@app.route('/hello')
def hello():
    return _('Hello, World!')



5. ضبط التوقيت المحلي والتواريخ لعدة مناطق زمنية:

لتعيين التوقيت المحلي بشكل صحيح، يمكنك استخدام Flask-Babel الذي يوفر خيارات مثل:

BABEL_DEFAULT_TIMEZONE: لتحديد المنطقة الزمنية الافتراضية.

BABEL_DEFAULT_LOCALE: لتحديد اللغة الافتراضية.


لضبط التوقيت المحلي والتواريخ لعدة مناطق زمنية يمكن استخدام مكتبة pytz التي تدير التوقيتات الزمنية في مختلف المناطق:

1. ضبط المنطقة الزمنية: باستخدام Flask-Babel، يمكنك تعيين المنطقة الزمنية للمستخدم باستخدام:

from flask_babel import get_timezone_name
from pytz import timezone

@app.before_request
def before_request():
    user_timezone = get_user_timezone()  # جلب المنطقة الزمنية للمستخدم
    app.config['BABEL_DEFAULT_TIMEZONE'] = user_timezone


2. عرض التواريخ حسب المنطقة الزمنية: لاستخراج التوقيت المحلي أو عرض التاريخ حسب المنطقة الزمنية، يمكنك استخدام babel و pytz كما يلي:

from flask_babel import format_datetime
from datetime import datetime
import pytz

@app.route('/time')
def show_time():
    user_timezone = pytz.timezone('Asia/Riyadh')  # مثال للمنطقة الزمنية
    time_in_timezone = datetime.now(user_timezone)
    formatted_time = format_datetime(time_in_timezone)
    return formatted_time



خلاصة:

ترجمة النصوص: يتم عن طريق استخدام gettext و ngettext، مع استخدام أدوات pybabel لاستخراج الترجمات وترجمتها إلى اللغات المختلفة.

ضبط التوقيت المحلي والتواريخ: باستخدام Babel و pytz، يمكن تحديد المناطق الزمنية وتنسيق التواريخ بما يتناسب مع كل منطقة.


بهذه الطريقة، يمكن إضافة دعم متعدد اللغات بشكل فعال في تطبيق Flask باستخدام Flask-Babel.