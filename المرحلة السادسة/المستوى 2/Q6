♡, [3/4/2025 12:22 AM]
1. استخدام Flask مع مكتبات أخرى مثل Flask-WTF وFlask-Login لتحقيق واجهة مستخدم ديناميكية وآمنة:

يمكن استخدام Flask مع مكتبات مثل Flask-WTF و Flask-Login لتحقيق واجهة مستخدم ديناميكية وآمنة من خلال دمج هذه المكتبات التي توفر أدوات متقدمة لتحسين الأمان وإدارة جلسات المستخدمين.

- Flask-WTF:

مكتبة Flask-WTF هي امتداد لـ Flask يعمل على تحسين التعامل مع النماذج (Forms) عن طريق إضافة ميزات مثل الحماية ضد CSRF (Cross-Site Request Forgery) وتقديم التحقق من المدخلات بسهولة. عند استخدام Flask-WTF، يمكنك تحسين الأمان من خلال تضمين رموز CSRF في كل نموذج لضمان أن النماذج التي يتم إرسالها هي من الموقع نفسه وليست من مواقع خبيثة.

- Flask-Login:

مكتبة Flask-Login تساعد على إدارة الجلسات (Sessions) للمستخدمين وتسجيل الدخول. مع Flask-Login، يمكنك إضافة واجهات لتسجيل الدخول، وحماية الصفحات، وإدارة الجلسات بشكل آمن بحيث يتمكن المستخدمون من الوصول إلى الصفحات فقط إذا كانوا قد قاموا بتسجيل الدخول بنجاح.

2. كيفية استخدام Flask-WTF مع نماذج HTML لجعل النماذج أكثر أمانًا:

Flask-WTF يعزز الأمان في النماذج من خلال تضمين حماية CSRF بشكل افتراضي. إليك كيفية استخدامها:

مثال:

1. تثبيت Flask-WTF:

pip install Flask-WTF


2. تعريف النموذج باستخدام Flask-WTF:

from flask import Flask, render_template, redirect, url_for
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField
from wtforms.validators import DataRequired

app = Flask(name)
app.config['SECRET_KEY'] = 'your_secret_key'

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        # هنا يمكنك إضافة كود لتسجيل الدخول
        return redirect(url_for('home'))
    return render_template('login.html', form=form)

@app.route('/home')
def home():
    return "Welcome to the home page!"

if name == 'main':
    app.run(debug=True)


3. إنشاء قالب HTML لعرض النموذج:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>
<body>
    <form method="POST" action="{{ url_for('login') }}">
        {{ form.hidden_tag() }}
        <label for="username">Username:</label>
        {{ form.username() }}<br>
        <label for="password">Password:</label>
        {{ form.password() }}<br>
        <button type="submit">Login</button>
    </form>
</body>
</html>



في هذا المثال:

يتم استخدام form.hidden_tag() لإدراج حقل CSRF بشكل تلقائي ضمن النموذج.

validate_on_submit() يتحقق من صحة النموذج قبل إرساله.


3. كيفية إنشاء واجهات تسجيل دخول وتسجيل مستخدمين باستخدام Flask-Login:

Flask-Login يساعدك على إدارة الجلسات وتسجيل الدخول للمستخدمين.

خطوات لإنشاء تسجيل دخول باستخدام Flask-Login:

1. تثبيت Flask-Login:

pip install Flask-Login


2. إعداد Flask-Login:

from flask import Flask, render_template, redirect, url_for, request
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(name)
app.config['SECRET_KEY'] = 'your_secret_key'

login_manager = LoginManager()
login_manager.init_app(app)

# تعريف المستخدمين:
users = {'admin': {'password': generate_password_hash('admin123')}}

class User(UserMixin):
    def init(self, id):
        self.id = id

@login_manager.user_loader
def load_user(user_id):
    return User(user_id)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users and check_password_hash(users[username]['password'], password):
            user = User(username)
            login_user(user)
            return redirect(url_for('home'))
    return render_template('login.html')

♡, [3/4/2025 12:22 AM]
@app.route('/home')
@login_required
def home():
    return f"Welcome {current_user.id}!"

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

if name == 'main':
    app.run(debug=True)



في هذا المثال:

UserMixin يوفر بعض الخصائص التي يحتاجها Flask-Login لتسهيل إدارة الجلسات.

يتم تسجيل الدخول باستخدام login_user(user) بعد التحقق من بيانات الاعتماد.

يتم حماية الصفحة بواسطة @login_required لضمان أن المستخدمين الذين لم يسجلوا الدخول لا يمكنهم الوصول إليها.


قالب HTML لتسجيل الدخول:

<form method="POST">
    <label for="username">Username:</label>
    <input type="text" name="username" required><br>
    <label for="password">Password:</label>
    <input type="password" name="password" required><br>
    <button type="submit">Login</button>
</form>

خلاصة:

Flask-WTF يجعل النماذج أكثر أمانًا من خلال إضافة حماية CSRF وإمكانية التحقق من المدخلات بسهولة.

Flask-Login يسهل إدارة الجلسات وتسجيل الدخول للمستخدمين، مما يتيح لك إنشاء واجهات تسجيل دخول وتسجيل مستخدمين آمنة.

دمج كلا المكتبتين معًا يساهم في بناء تطبيقات ويب أكثر أمانًا وفعالية.