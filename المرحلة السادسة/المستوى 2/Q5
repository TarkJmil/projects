♡, [3/4/2025 12:20 AM]
إضافة ميزة التعليقات والتفاعل بين المستخدمين في المدونة باستخدام Flask يمكن أن يتم عبر خطوات متعددة. إليك شرحًا لكيفية بناء هذه الميزة:

1. بناء نموذج تعليق وإرفاقه بالمقالات

أولًا، تحتاج إلى إنشاء نموذج يسمح للمستخدمين بكتابة تعليقاتهم. باستخدام Flask، يمكنك إنشاء نموذج بسيط باستخدام مكتبة Flask-WTF، التي تسهل التعامل مع النماذج وعمليات التحقق.

الخطوات:

1. تثبيت الحزم المطلوبة:

pip install flask-wtf


2. إنشاء نموذج التعليق: يمكنك استخدام Flask-WTF لإنشاء نموذج لتقديم التعليقات، مثلًا:

from flask_wtf import FlaskForm
from wtforms import StringField, TextAreaField
from wtforms.validators import DataRequired

class CommentForm(FlaskForm):
    name = StringField('اسم المستخدم', validators=[DataRequired()])
    content = TextAreaField('التعليق', validators=[DataRequired()])


3. إنشاء قاعدة البيانات لحفظ التعليقات: يمكنك استخدام SQLAlchemy لإنشاء جدول للتعليقات مرتبط بكل مقال. يجب أن يحتوي هذا الجدول على معلومات مثل اسم المستخدم، محتوى التعليق، وتاريخ التعليق.

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Comment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120))
    content = db.Column(db.Text)
    post_id = db.Column(db.Integer, db.ForeignKey('post.id'))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    post = db.relationship('Post', backref='comments')


4. عرض نموذج التعليق في واجهة المستخدم: في الملف HTML الخاص بالمقال، يمكنك إضافة النموذج والتأكد من إرساله:

<form method="POST" action="{{ url_for('post', post_id=post.id) }}">
    {{ form.hidden_tag() }}
    <label for="name">اسم المستخدم:</label>
    {{ form.name() }}
    <label for="content">التعليق:</label>
    {{ form.content() }}
    <button type="submit">إرسال</button>
</form>

<h3>التعليقات:</h3>
{% for comment in post.comments %}
    <p>{{ comment.name }}: {{ comment.content }}</p>
{% endfor %}


5. إرفاق التعليقات بالمقالات: في الـ route الخاص بكل مقال، يمكنك التعامل مع نموذج التعليق وحفظ التعليقات في قاعدة البيانات.

@app.route('/post/<int:post_id>', methods=['GET', 'POST'])
def post(post_id):
    post = Post.query.get_or_404(post_id)
    form = CommentForm()
    if form.validate_on_submit():
        comment = Comment(name=form.name.data, content=form.content.data, post_id=post.id)
        db.session.add(comment)
        db.session.commit()
        return redirect(url_for('post', post_id=post.id))
    return render_template('post.html', post=post, form=form)



2. كيفية تأكيد وجود مستخدمين حقيقيين (مثلاً باستخدام Captcha) لمنع التعليقات المزعجة

لحماية النموذج من التعليقات المزعجة أو السبام، يمكن استخدام reCAPTCHA من جوجل.

الخطوات:

1. إنشاء مفتاح reCAPTCHA: اذهب إلى موقع reCAPTCHA من جوجل وأنشئ مفتاحًا لموقعك.


2. تثبيت مكتبة reCAPTCHA: يمكنك استخدام مكتبة Flask-WTF التي تدعم reCAPTCHA بشكل مدمج.

pip install flask-wtf


3. تحديث نموذج التعليق ليتضمن reCAPTCHA: أضف RecaptchaField في نموذج التعليق:

from flask_wtf.recaptcha import RecaptchaField

class CommentForm(FlaskForm):
    name = StringField('اسم المستخدم', validators=[DataRequired()])
    content = TextAreaField('التعليق', validators=[DataRequired()])
    recaptcha = RecaptchaField()


4. تحديث إعدادات Flask للتفاعل مع reCAPTCHA: في ملف الإعدادات (config.py) ضع المفاتيح التي حصلت عليها من جوجل:

RECAPTCHA_PUBLIC_KEY = 'YOUR_PUBLIC_KEY'
RECAPTCHA_PRIVATE_KEY = 'YOUR_PRIVATE_KEY'

وفي التطبيق:

app.config['RECAPTCHA_PUBLIC_KEY'] = 'YOUR_PUBLIC_KEY'
app.config['RECAPTCHA_PRIVATE_KEY'] = 'YOUR_PRIVATE_KEY'


5. التحقق من reCAPTCHA: بعد إضافة reCAPTCHA إلى النموذج، تأكد من أنه تم التحقق من الرمز بشكل صحيح قبل إرسال التعليق:

if form.validate_on_submit():
    if not form.recaptcha.validate(form):
        flash('التحقق من reCAPTCHA فشل!')
        return redirect(url_for('post', post_id=post.id))
    comment = Comment(name=form.name.data, content=form.content.data, post_id=post.id)
    db.session.add(comment)
    db.session.commit()
    return redirect(url_for('post', post_id=post.id))



3. التأكيد على وجود مستخدمين حقيقيين:

إضافة reCAPTCHA يساعد في منع التعليقات المزعجة من الروبوتات. يمكن استخدام طرق أخرى مثل:

♡, [3/4/2025 12:20 AM]
تفعيل التحقق عبر البريد الإلكتروني: طلب من المستخدم تأكيد بريده الإلكتروني قبل السماح له بإرسال التعليقات.

التحقق من سرعة الإرسال: منع إرسال التعليقات بسرعة كبيرة جدًا (لكي تتأكد من أنه ليس روبوتًا).


بهذه الطريقة، يمكنك إضافة ميزة التعليقات وحمايتها ضد التعليقات المزعجة باستخدام Flask وreCAPTCHA.