♡, [3/3/2025 11:28 PM]
الخوارزميات الجينية (Genetic Algorithms) هي أسلوب تحسين مستوحى من نظرية التطور الطبيعي، حيث تُستخدم مفاهيم مثل الانتقاء الطبيعي، والتزاوج، والطفرات لتوليد حلول متطورة لمشكلات معقدة. في بايثون، تُعد مكتبة DEAP (Distributed Evolutionary Algorithms in Python) واحدة من أشهر المكتبات التي تُسهل تصميم وتنفيذ هذه الخوارزميات.

فيما يلي شرح مفصل لكيفية تصميم خوارزمية جينية باستخدام DEAP:

1. تعريف المشكلة ومعيار التقييم

تعريف الهدف: أول خطوة هي تحديد المشكلة التي تريد حلها (مثلاً تحسين وظيفة معينة أو إيجاد مجموعة من المتغيرات التي تحقق أفضل قيمة).

تحديد دالة التقييم: تقوم الدالة بتقييم "ملاءمة" أو "جودة" الفرد (الحل). مثلاً، في مشكلة OneMax الشائعة، يكون الهدف هو تعظيم عدد الأصفار أو الواحدات في المتجه.


2. إعداد بيئة DEAP

إنشاء فئات الكائنات:

يتم استخدام creator لتعريف فئة الملاءمة (Fitness) التي تحدد ما إذا كان الهدف هو تعظيم أو تقليل الدالة.

تُعرّف فئة الفرد (Individual) التي ستخزن الحلول، غالبًا ما تكون قائمة من الأرقام أو القيم.


تهيئة صندوق الأدوات (toolbox):

يقوم الـ toolbox بتسجيل الوظائف التي تولد السمات (Attributes)، وتكوين الأفراد (Individuals)، وتشكيل السكان (Population).

تُسجل أيضًا الدوال الأساسية مثل دالة التقييم، دوال التزاوج (crossover)، الطفرة (mutation)، وأسلوب الاختيار (selection).



3. تسجيل الدوال الأساسية

دالة التقييم: تُحسب قيمة الملاءمة للفرد.

دالة التزاوج (Crossover): تُستخدم لتوليد أفراد جدد عن طريق دمج أجزاء من أفراد موجودة (مثلاً باستخدام التزاوج بنقطتين).

دالة الطفرة (Mutation): تُحدث تغييرات عشوائية طفيفة على الفرد، مما يساعد في الحفاظ على تنوع السكان.

دالة الاختيار (Selection): تُحدد الأفراد الذين سيتم نقلهم للأجيال التالية بناءً على ملاءمتهم (مثلاً اختيار البطولة).


4. الحلقة التطورية

تهيئة السكان: بدءاً بسكان عشوائي من الأفراد.

التكرار عبر الأجيال: لكل جيل:

تقييم جميع الأفراد باستخدام دالة التقييم.

اختيار الأفراد الأفضل.

تطبيق التزاوج والطفرة لتوليد أفراد جدد.

تحديث السكان واستبدال الأفراد الأضعف.


معايير الإيقاف: يمكن أن يكون عدد الأجيال محددًا أو تحقيق معيار أداء معين.


5. مثال برمجي باستخدام DEAP

فيما يلي مثال مبسط على خوارزمية جينية تُعالج مشكلة OneMax (تعظيم عدد الواحدات في فرد ثنائي):

import random
from deap import base, creator, tools, algorithms

# تعريف فئة الملاءمة والفرد
creator.create("FitnessMax", base.Fitness, weights=(1.0,))  # هدف تعظيم الملاءمة
creator.create("Individual", list, fitness=creator.FitnessMax)

toolbox = base.Toolbox()
# تعريف كيفية إنشاء سمة عشوائية (0 أو 1)
toolbox.register("attr_bool", random.randint, 0, 1)
# تعريف الفرد على أنه قائمة من 10 سمات
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_bool, n=10)
# تعريف السكان كمجموعة من الأفراد
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

# دالة التقييم: مجموع عناصر الفرد (كلما زادت الواحدات، زادت الملاءمة)
def evalOneMax(individual):
    return sum(individual),  # إرجاع tuple

toolbox.register("evaluate", evalOneMax)
toolbox.register("mate", tools.cxTwoPoint)         # التزاوج بنقطتين
toolbox.register("mutate", tools.mutFlipBit, indpb=0.05)  # طفرة بتغيير عشوائي لكل سمة مع احتمال 5%
toolbox.register("select", tools.selTournament, tournsize=3)  # اختيار باستخدام بطولة من 3 أفراد

def main():
    random.seed(64)  # لضمان إعادة إنتاج النتائج
    population = toolbox.population(n=50)  # إنشاء سكان مكون من 50 فرد
    hof = tools.HallOfFame(1)  # لتخزين أفضل فرد
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("avg", lambda x: sum(x)/len(x))
    stats.register("min", min)
    stats.register("max", max)

    # تطبيق الخوارزمية التطورية عبر 40 جيلًا
    population, logbook = algorithms.eaSimple(population, toolbox, cxpb=0.5, mutpb=0.2, ngen=40,
                                                stats=stats, halloffame=hof, verbose=True)
    return population, logbook, hof

if name == "main":
    population, logbook, hof = main()
    print("أفضل فرد حصل عليه الخوارزمية:", hof[0])

شرح الكود:

تعريف الفئات: باستخدام creator، تم تعريف FitnessMax لتحديد أننا نريد تعظيم الملاءمة، وفئة Individual كقائمة من القيم.

♡, [3/3/2025 11:28 PM]
تهيئة الأفراد: باستخدام toolbox.register، قمنا بتعريف كيفية إنشاء سمة عشوائية وتكوين فرد وسكان.

دوال التقييم والتشغيل:

evalOneMax: دالة التقييم التي تحسب مجموع الواحدات في الفرد.

mate، mutate، و select: تُستخدم لعمليات التزاوج، الطفرة والاختيار.


تشغيل الخوارزمية: باستخدام algorithms.eaSimple، يتم تطبيق الخوارزمية عبر عدد محدد من الأجيال مع تسجيل الإحصائيات وتحديث أفضل حل.


الخلاصة

تُعد مكتبة DEAP أداة قوية تتيح للمطورين تصميم خوارزميات جينية بسهولة باستخدام واجهات بسيطة وسلسة. من خلال تعريف المشكلة، إعداد دوال التقييم والعمليات التطورية، يمكن استخدام الخوارزميات الجينية لحل مجموعة متنوعة من المشكلات المعقدة في مجالات مختلفة مثل الذكاء الاصطناعي، تحسين العمليات، وغيرها.

هذا المثال يوضح الأساسيات، ويمكن توسيعه وتعديله للتعامل مع مشكلات أكثر تعقيدًا عبر تغيير دالة التقييم، تمثيل الفرد، واختيار عمليات التزاوج والطفرة بما يتناسب مع طبيعة المشكلة.