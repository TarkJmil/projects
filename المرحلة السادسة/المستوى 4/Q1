1. التعامل مع القيم المفقودة في DataFrame باستخدام pandas

عند التعامل مع القيم المفقودة (NaN أو None) في pandas، هناك عدة طرق لمعالجتها:

حذف القيم المفقودة:

df.dropna()  # حذف جميع الصفوف التي تحتوي على قيم مفقودة
df.dropna(axis=1)  # حذف الأعمدة التي تحتوي على قيم مفقودة

استبدال القيم المفقودة:

df.fillna(0)  # استبدال القيم المفقودة بالقيمة 0
df.fillna(df.mean())  # استبدال القيم المفقودة بمتوسط القيم في كل عمود
df.fillna(method='ffill')  # استبدال القيم المفقودة بالقيمة السابقة في نفس العمود
df.fillna(method='bfill')  # استبدال القيم المفقودة بالقيمة التالية في نفس العمود

التعرف على القيم المفقودة:

df.isna()  # إرجاع DataFrame يحتوي على True للمكان الذي يوجد فيه قيمة مفقودة
df.isna().sum()  # حساب عدد القيم المفقودة في كل عمود



---

2. دمج أكثر من DataFrame في Pandas

يمكن دمج أكثر من DataFrame باستخدام merge() مع تحديد نوع الدمج:

import pandas as pd

df1 = pd.DataFrame({'ID': [1, 2, 3], 'Name': ['Ali', 'Sara', 'Omar']})
df2 = pd.DataFrame({'ID': [2, 3, 4], 'Score': [85, 90, 78]})

# الدمج الداخلي (inner join) - يحتفظ فقط بالقيم المشتركة بين DataFrame الأول والثاني
df_inner = df1.merge(df2, on='ID', how='inner')

# الدمج الخارجي (outer join) - يحتفظ بجميع القيم من DataFrame الأول والثاني مع ملء القيم المفقودة بـ NaN
df_outer = df1.merge(df2, on='ID', how='outer')

# الدمج الأيسر (left join) - يحتفظ بجميع القيم من DataFrame الأول ويضيف ما يطابقها من DataFrame الثاني
df_left = df1.merge(df2, on='ID', how='left')

# الدمج الأيمن (right join) - يحتفظ بجميع القيم من DataFrame الثاني ويضيف ما يطابقها من DataFrame الأول
df_right = df1.merge(df2, on='ID', how='right')

print(df_inner)
print(df_outer)
print(df_left)
print(df_right)

الفرق بين أنواع الدمج:

inner: يحتفظ فقط بالصفوف التي لها قيم متطابقة في العمود المشترك (ID هنا).

outer: يحتفظ بجميع الصفوف من كلا الجدولين، مع ملء القيم غير المتطابقة بـ NaN.

left: يحتفظ بجميع الصفوف من الجدول الأول (df1) ويضيف القيم المطابقة من الجدول الثاني (df2).

right: يحتفظ بجميع الصفوف من الجدول الثاني (df2) ويضيف القيم المطابقة من الجدول الأول (df1).



---

3. الفرق بين groupby() و pivot_table() في Pandas

groupby()

تُستخدم groupby() لتجميع البيانات بناءً على عمود معين، ثم تطبيق عمليات مثل sum(), mean(), count() وغيرها.

df = pd.DataFrame({'Department': ['HR', 'IT', 'HR', 'IT', 'Finance'],
                   'Salary': [5000, 7000, 6000, 8000, 9000]})

# حساب متوسط الراتب لكل قسم
df_grouped = df.groupby('Department')['Salary'].mean()
print(df_grouped)

متى نستخدم groupby()؟

عند الحاجة إلى تجميع البيانات بناءً على عمود معين.

عند الحاجة إلى تطبيق وظائف إحصائية مثل sum(), count(), mean() على البيانات المجمعّة.



---

pivot_table()

تُستخدم pivot_table() لإنشاء جداول محورية تلخص البيانات بطريقة أكثر مرونة من groupby().

df = pd.DataFrame({'Department': ['HR', 'IT', 'HR', 'IT', 'Finance'],
                   'Gender': ['Male', 'Female', 'Female', 'Male', 'Male'],
                   'Salary': [5000, 7000, 6000, 8000, 9000]})

# إنشاء جدول محوري لحساب متوسط الراتب لكل قسم بناءً على الجنس
pivot = df.pivot_table(values='Salary', index='Department', columns='Gender', aggfunc='mean')
print(pivot)

متى نستخدم pivot_table()؟

عند الحاجة إلى إنشاء جدول محوري يمكنه عرض أكثر من بعد في نفس الوقت.

عند الحاجة إلى تلخيص البيانات بشكل مرئي مع إمكانية تجميع القيم باستخدام دوال مختلفة (sum(), mean(), count()).


الفرق بين groupby() و pivot_table(): | الميزة           | groupby() | pivot_table() | |-----------------|------------|----------------| | تجميع البيانات | نعم        | نعم            | | دعم الأبعاد المتعددة | لا         | نعم            | | دعم أكثر من عمود في الفهرس | لا         | نعم            | | القيم الافتراضية للبيانات المفقودة | لا        | نعم (تُملأ بـ NaN تلقائيًا) |

باختصار، groupby() أبسط ويُستخدم للتحليل الأساسي، بينما pivot_table() أكثر مرونة ويُستخدم عندما نحتاج إلى تحليل متعدد الأبعاد.