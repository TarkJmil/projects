في Flask، يمكنك تخزين الصور المعدلة إما في قاعدة بيانات أو حفظها في مجلد معين، حسب احتياجاتك. إليك كيفية القيام بالأمرين:


---

1. حفظ الصور في مجلد معين على الخادم

يمكنك حفظ الصور المعدلة في مجلد مثل static/uploads/ داخل مشروعك.

خطوات التنفيذ:

استقبل الصورة واحفظها بعد التعديل.

حدد مسار الحفظ داخل المجلد.

احفظ المسار في قاعدة البيانات إذا كنت بحاجة إليه لاحقًا.


مثال:

from flask import Flask, request, render_template
import os
from werkzeug.utils import secure_filename
from PIL import Image

app = Flask(name)

UPLOAD_FOLDER = 'static/uploads/'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.route('/upload', methods=['POST'])
def upload_image():
    if 'file' not in request.files:
        return "No file part"
    
    file = request.files['file']
    if file.filename == '':
        return "No selected file"
    
    filename = secure_filename(file.filename)
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    
    # حفظ الصورة الأصلية
    file.save(filepath)

    # تعديل الصورة باستخدام PIL
    img = Image.open(filepath)
    img = img.resize((300, 300))  # مثال: تغيير الحجم
    img.save(filepath)

    return f"Image saved at {filepath}"

if name == 'main':
    app.run(debug=True)

ماذا يحدث هنا؟

1. يستقبل التطبيق صورة من المستخدم.


2. يحفظها في static/uploads/.


3. يعدّلها باستخدام PIL (مثل تغيير الحجم).


4. يعيد حفظ الصورة المعدلة في نفس المسار.




---

2. تخزين الصور في قاعدة بيانات (Base64 أو BLOB)

بدلًا من حفظ الصورة في مجلد، يمكن تخزينها مباشرةً في قاعدة البيانات باستخدام Base64 أو BLOB (Binary Large Object).

مثال باستخدام SQLite وBase64:

import sqlite3
import base64

# إنشاء قاعدة البيانات (مرة واحدة فقط)
def init_db():
    conn = sqlite3.connect("images.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS images (id INTEGER PRIMARY KEY, img_data TEXT)''')
    conn.commit()
    conn.close()

def save_image_to_db(image_path):
    with open(image_path, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode("utf-8")
    
    conn = sqlite3.connect("images.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO images (img_data) VALUES (?)", (encoded_string,))
    conn.commit()
    conn.close()

init_db()
save_image_to_db("static/uploads/example.jpg")

ماذا يحدث هنا؟

1. يتم قراءة الصورة وتحويلها إلى Base64.


2. تُخزن في قاعدة البيانات كسلسلة نصية.


3. يمكن لاحقًا استرجاعها وتحويلها إلى صورة عند الحاجة.




---

متى تستخدم كل طريقة؟

حفظ الصور في مجلد: إذا كنت تحتاج إلى تحميل الصور بسرعة ولا تمانع في تخزينها كملفات.

تخزين الصور في قاعدة بيانات: إذا كنت بحاجة إلى الاحتفاظ بها كبيانات منظمة مع باقي المعلومات، أو إذا كنت تستخدم MongoDB/GridFS لحلول أكثر كفاءة.