1. إنشاء واجهة مستخدم في Flask لتحميل الصور، تعديلها، وتنزيل النسخة المعدلة

يمكنك إنشاء تطبيق Flask بسيط يسمح للمستخدمين بتحميل الصور، تعديلها (مثل إضافة فلتر أو تغيير الحجم)، ثم تنزيل النسخة المعدلة.

الخطوات:

1. إعداد Flask ورفع الملفات: استخدم Flask لإنشاء خادم ويب يحتوي على صفحة لرفع الصور.


2. معالجة الصورة: استخدم Pillow أو OpenCV لإجراء التعديلات المطلوبة.


3. إرجاع الصورة المعدلة: أرسل الصورة المعدلة إلى المستخدم عبر المتصفح.


4. تنزيل الصورة: قدم رابطًا يسمح للمستخدم بتنزيل النسخة المعدلة.



مثال على كود Flask

from flask import Flask, render_template, request, send_file
from PIL import Image, ImageFilter
import os

app = Flask(name)
UPLOAD_FOLDER = "uploads"
PROCESSED_FOLDER = "processed"

# تأكد من وجود المجلدات
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(PROCESSED_FOLDER, exist_ok=True)

@app.route("/", methods=["GET", "POST"])
def upload_file():
    if request.method == "POST":
        file = request.files["image"]
        if file:
            filepath = os.path.join(UPLOAD_FOLDER, file.filename)
            file.save(filepath)

            # معالجة الصورة
            img = Image.open(filepath)
            img = img.filter(ImageFilter.CONTOUR)  # مثال على التعديل
            processed_path = os.path.join(PROCESSED_FOLDER, file.filename)
            img.save(processed_path)

            return render_template("index.html", uploaded=True, filename=file.filename)
    
    return render_template("index.html", uploaded=False)

@app.route("/download/<filename>")
def download_file(filename):
    return send_file(os.path.join(PROCESSED_FOLDER, filename), as_attachment=True)

if name == "main":
    app.run(debug=True)


---

2. تحسين تجربة المستخدم باستخدام JavaScript و HTML5

يمكنك تحسين تجربة المستخدم عند رفع الصورة باستخدام JavaScript و HTML5 بحيث يتم عرض الصورة قبل وبعد التعديل دون الحاجة إلى تحديث الصفحة.

تحسينات ممكنة:

استخدام JavaScript لعرض الصورة قبل رفعها.

عرض الصورة المعدلة مباشرة بعد معالجة الخادم.

تحسين واجهة المستخدم باستخدام Bootstrap أو CSS.


مثال على HTML و JavaScript

<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>تعديل الصور</title>
    <style>
        img { max-width: 100%; height: auto; margin-top: 10px; }
    </style>
</head>
<body>
    <h2>تحميل صورة وتعديلها</h2>
    <form id="uploadForm" method="post" enctype="multipart/form-data">
        <input type="file" id="imageInput" name="image" accept="image/*" required>
        <button type="submit">رفع وتعديل</button>
    </form>

    <h3>الصورة الأصلية:</h3>
    <img id="originalImage" style="display: none;">

    <h3>الصورة المعدلة:</h3>
    {% if uploaded %}
        <img src="{{ url_for('download_file', filename=filename) }}">
        <br>
        <a href="{{ url_for('download_file', filename=filename) }}" download>تحميل الصورة المعدلة</a>
    {% endif %}

    <script>
        document.getElementById("imageInput").addEventListener("change", function(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById("originalImage").src = e.target.result;
                    document.getElementById("originalImage").style.display = "block";
                };
                reader.readAsDataURL(file);
            }
        });
    </script>
</body>
</html>


---

النتيجة

يتمكن المستخدم من رفع الصورة بسهولة.

يتم عرض الصورة الأصلية قبل رفعها.

بعد المعالجة، يتم عرض الصورة المعدلة وتنزيلها دون الحاجة إلى تحديث الصفحة.


بهذه الطريقة، يمكنك بناء نظام قوي يسمح للمستخدمين بتعديل الصور وتحسين تجربة التفاعل باستخدام JavaScript و Flask.